# import numpy as np
# import matplotlib.pyplot as plt
#
# def silu(x):
#     return x * (1 / (1 + np.exp(-x)))
#
# x = np.linspace(-5, 5, 100)  # 定义输入范围
#
# y = silu(x)  # 计算SiLU激活函数的输出
#
# plt.plot(x, y)
# plt.xlabel('x')
# plt.ylabel('SiLU(x)')
# plt.title('SiLU Activation Function')
# plt.grid(True)
# plt.show()
import matplotlib.pyplot as plt

# Define the data for x-axis (epochs) and y-axis (map50 values)
epochs = list(range(1, 61))  # Epochs from 1 to 60
map50_values = [0.18654,
0.21025,
0.17383,
0.19843,
0.22944,
0.26641,
0.29114,
0.33374,
0.32756,
0.3706,
0.38086,
0.39416,
0.40803,
0.42134,
0.43885,
0.44706,
0.46413,
0.49425,
0.47713,
0.49269,
0.50437,
0.5068,
0.51159,
0.51424,
0.52883,
0.50866,
0.52873,
0.54541,
0.54753,
0.54354,
0.55161,
0.52901,
0.55587,
0.55224,
0.54804,
0.56153,
0.57545,
0.56135,
0.54745,
0.55247,
0.56701,
0.58276,
0.58429,
0.56899,
0.57795,
0.58539,
0.58904,
0.58227,
0.58799,
0.58362,
0.58367,
0.58413,
0.58239,
0.57956,
0.576,
0.57725,
0.57241,
0.57079,
0.57724,
0.5734
]  # Replace with your own map50 values
map50_values_mish = [0.19712,
0.22902,
0.18572,
0.19045,
0.24481,
0.27796,
0.28354,
0.35046,
0.32792,
0.37691,
0.39195,
0.40624,
0.41118,
0.43383,
0.4279,
0.43499,
0.45988,
0.49271,
0.45266,
0.47445,
0.49663,
0.49027,
0.48158,
0.49765,
0.50692,
0.5106,
0.51498,
0.51084,
0.52789,
0.52794,
0.54158,
0.54033,
0.54902,
0.55501,
0.54028,
0.55994,
0.56409,
0.57533,
0.56227,
0.56932,
0.56354,
0.57667,
0.58255,
0.57981,
0.58053,
0.58299,
0.58725,
0.58842,
0.58735,
0.59533,
0.59172,
0.58246,
0.58335,
0.58193,
0.58784,
0.58759,
0.58669,
0.59287,
0.59248,
0.58665
]
# map50_values_f2f = [0.14447,
# 0.17379,
# 0.15724,
# 0.18867,
# 0.25155,
# 0.26109,
# 0.29235,
# 0.33305,
# 0.34313,
# 0.3466,
# 0.39552,
# 0.40474,
# 0.41623,
# 0.43923,
# 0.42355,
# 0.46457,
# 0.47914,
# 0.47759,
# 0.4829,
# 0.47942,
# 0.46765,
# 0.49262,
# 0.4751,
# 0.49066,
# 0.49118,
# 0.49332,
# 0.518,
# 0.54248,
# 0.54549,
# 0.54136,
# 0.54257,
# 0.53908,
# 0.55299,
# 0.5579,
# 0.56153,
# 0.55948,
# 0.57876,
# 0.56751,
# 0.56088,
# 0.56789,
# 0.5742,
# 0.56377,
# 0.5679,
# 0.57624,
# 0.58192,
# 0.58322,
# 0.60157,
# 0.60182,
# 0.59503,
# 0.5977,
# 0.59756,
# 0.60378,
# 0.60087,
# 0.60283,
# 0.59984,
# 0.60484,
# 0.60375,
# 0.60797,
# 0.60586,
# 0.60585
# ]
map50_values_f2f = [1.4796,
1.4261,
1.4831,
1.5278,
1.49,
1.4529,
1.4223,
1.3931,
1.3798,
1.3611,
1.3523,
1.3396,
1.3243,
1.3214,
1.3101,
1.301,
1.2909,
1.2816,
1.2776,
1.2677,
1.2593,
1.2531,
1.2512,
1.2443,
1.2367,
1.2324,
1.2275,
1.2108,
1.2088,
1.2076,
1.1984,
1.1917,
1.1844,
1.1833,
1.1708,
1.1671,
1.158,
1.1502,
1.1509,
1.1387,
1.128,
1.1273,
1.1238,
1.1083,
1.0995,
1.1037,
1.094,
1.0804,
1.0693,
1.0646,
1.0582,
1.0475,
1.0423,
1.0305,
1.0212,
1.0198,
1.0045,
1.003,
0.99254,
0.99202
]
# Plot the line graph
# plt.plot(epochs, map50_values, marker='o', label='SiLU')
# plt.plot(epochs, map50_values_mish, marker='s', label='Mish')
plt.plot(epochs, map50_values_f2f, marker='p', label='D2F-Yolov8')
# Set the labels for x-axis and y-axis
plt.xlabel('Epochs')
plt.ylabel('box_loss')

# Set the title of the graph
plt.title('train/box_loss')
plt.legend()
# Display the graph
plt.show()

